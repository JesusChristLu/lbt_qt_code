#pragma once
#include <vector>
#include <algorithm>
#include "utils.h"

class Interp1d {

    // Generated by ChatGPT
    
public:
    // std::vector<double> x_;
    // std::vector<double> y_;
    std::vector<std::pair<double, double>> x_y;
    Interp1d() {}
    Interp1d(const std::vector<double>& x, const std::vector<double>& y);

    double operator()(double xp) const;
};

class CubicSpline {
    // Generated by ChatGPT
    
public:
    struct SplineTuple {
        double a, b, c, d, x;

        inline double operator()(double xp) const {
            double dx = xp - x;
            return a + (b + (c + d * dx) * dx) * dx;
        }

        inline bool operator<(const SplineTuple& other) const
        {
            return a < other.a;
        }
    };

    std::vector<SplineTuple> splines_;

    CubicSpline() {}
    CubicSpline(const std::vector<double>& x, const std::vector<double>& y);

    double operator()(double xp) const;

};

class LinearInterpolation2D {
public:
    LinearInterpolation2D() {};
    LinearInterpolation2D(const std::vector<double>& x, 
        const std::vector<double>& y, 
        const std::vector<std::vector<double>>& z);

    double operator()(double x, double y) const;

private:
    std::vector<double> x_;
    std::vector<double> y_;
    std::vector<std::vector<double>> z_;

    //static double linearInterpolate(double x, double x0, double x1, double y0, double y1) {
    //    return y0 + (x - x0) * (y1 - y0) / (x1 - x0);
    //}
    static int findInterval(const std::vector<double>& v, double value);
};

class CubicInterpolation2D {
public:
    CubicInterpolation2D() {}
    CubicInterpolation2D(const std::vector<double>& x,
        const std::vector<double>& y,
        const std::vector<std::vector<double>>& z);

    double operator()(double x, double y) const;

private:
    std::vector<double> x_, y_;
    std::vector<std::vector<double>> z_;
    std::vector<CubicSpline> rowSplines_, colSplines_;
};