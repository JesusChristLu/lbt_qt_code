# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'main_window_ui.ui'
##
## Created by: Qt User Interface Compiler version 6.4.0
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################
from pathlib import Path

from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QAction, QBrush, QColor, QConicalGradient,
    QCursor, QFont, QFontDatabase, QGradient,
    QIcon, QImage, QKeySequence, QLinearGradient,
    QPainter, QPalette, QPixmap, QRadialGradient,
    QTransform)
from PySide6.QtWidgets import (QAbstractItemView, QAbstractScrollArea, QApplication, QDockWidget,
    QGridLayout, QHBoxLayout, QHeaderView, QLayout,
    QMainWindow, QMenu, QMenuBar, QSizePolicy,
    QSpacerItem, QSplitter, QStatusBar, QTabWidget,
    QToolBar, QToolButton, QVBoxLayout, QWidget)

from .graphics.dag_widget import DAGWidget
from .widgets.dynamic.chart_view import (QChartViewY0, QChartViewY1)
from .widgets.dynamic.plot_widget import QPlotWidget
from .widgets.dynamic.progress import Progress
from .widgets.library.dag_tree_view  import DAGLibraryTreeView
from .widgets.library.exp_tree_view import EXPLibraryTreeView
from .widgets.library.filter_line_edit import FilterLineEdit
from .widgets.log.log_visage import QTextEditLogger
from .widgets.topolopy.topology_widget import TopologyWidget

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        if not MainWindow.objectName():
            MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(1358, 818)
        icon = QIcon()
        icon.addFile(u":/logo.png", QSize(), QIcon.Normal, QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
        MainWindow.setTabShape(QTabWidget.Rounded)
        MainWindow.setDockNestingEnabled(True)
        MainWindow.setDockOptions(QMainWindow.AllowNestedDocks|QMainWindow.AllowTabbedDocks|QMainWindow.AnimatedDocks|QMainWindow.GroupedDragging)
        self.actionSaveEXP = QAction(MainWindow)
        self.actionSaveEXP.setObjectName(u"actionSaveEXP")
        icon1 = QIcon()
        icon1.addFile(u":/save", QSize(), QIcon.Normal, QIcon.Off)
        self.actionSaveEXP.setIcon(icon1)
        self.actionLibrary = QAction(MainWindow)
        self.actionLibrary.setObjectName(u"actionLibrary")
        self.actionLibrary.setCheckable(True)
        self.actionLibrary.setChecked(True)
        icon2 = QIcon()
        icon2.addFile(u":/library-label.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionLibrary.setIcon(icon2)
        self.actionLog = QAction(MainWindow)
        self.actionLog.setObjectName(u"actionLog")
        self.actionLog.setCheckable(True)
        self.actionLog.setChecked(True)
        icon3 = QIcon()
        icon3.addFile(u":/log", QSize(), QIcon.Normal, QIcon.Off)
        self.actionLog.setIcon(icon3)
        self.actionExperimentOptions = QAction(MainWindow)
        self.actionExperimentOptions.setObjectName(u"actionExperimentOptions")
        self.actionExperimentOptions.setCheckable(True)
        self.actionExperimentOptions.setChecked(True)
        icon4 = QIcon()
        icon4.addFile(u":/experiment-options.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionExperimentOptions.setIcon(icon4)
        self.actionStyleOpen = QAction(MainWindow)
        self.actionStyleOpen.setObjectName(u"actionStyleOpen")
        self.actionStyleDefault = QAction(MainWindow)
        self.actionStyleDefault.setObjectName(u"actionStyleDefault")
        self.actionStyleDark = QAction(MainWindow)
        self.actionStyleDark.setObjectName(u"actionStyleDark")
        self.actionScreenshot = QAction(MainWindow)
        self.actionScreenshot.setObjectName(u"actionScreenshot")
        icon5 = QIcon()
        icon5.addFile(u":/screenshot", QSize(), QIcon.Normal, QIcon.Off)
        self.actionScreenshot.setIcon(icon5)
        self.actionFullScreen = QAction(MainWindow)
        self.actionFullScreen.setObjectName(u"actionFullScreen")
        icon6 = QIcon()
        icon6.addFile(u":/full-screen.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionFullScreen.setIcon(icon6)
        self.actionVisageDark = QAction(MainWindow)
        self.actionVisageDark.setObjectName(u"actionVisageDark")
        self.actionSaveWindowState = QAction(MainWindow)
        self.actionSaveWindowState.setObjectName(u"actionSaveWindowState")
        self.actionSaveWindowState.setIcon(icon1)
        self.actionCloseWindow = QAction(MainWindow)
        self.actionCloseWindow.setObjectName(u"actionCloseWindow")
        icon7 = QIcon()
        icon7.addFile(u":/close.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionCloseWindow.setIcon(icon7)
        self.actionComponent = QAction(MainWindow)
        self.actionComponent.setObjectName(u"actionComponent")
        icon8 = QIcon()
        icon8.addFile(u":/qubit.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionComponent.setIcon(icon8)
        self.actionAnalysisOptions = QAction(MainWindow)
        self.actionAnalysisOptions.setObjectName(u"actionAnalysisOptions")
        self.actionAnalysisOptions.setCheckable(True)
        self.actionAnalysisOptions.setChecked(True)
        icon9 = QIcon()
        icon9.addFile(u":/analysis-options.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionAnalysisOptions.setIcon(icon9)
        self.actionSystem = QAction(MainWindow)
        self.actionSystem.setObjectName(u"actionSystem")
        icon10 = QIcon()
        icon10.addFile(u":/setting.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionSystem.setIcon(icon10)
        self.actionCommunity = QAction(MainWindow)
        self.actionCommunity.setObjectName(u"actionCommunity")
        icon11 = QIcon()
        icon11.addFile(u":/about.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionCommunity.setIcon(icon11)
        self.actionRunExperiment = QAction(MainWindow)
        self.actionRunExperiment.setObjectName(u"actionRunExperiment")
        icon12 = QIcon()
        icon12.addFile(u":/run.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionRunExperiment.setIcon(icon12)
        self.actionSchedule = QAction(MainWindow)
        self.actionSchedule.setObjectName(u"actionSchedule")
        icon13 = QIcon()
        icon13.addFile(u":/live-fill.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionSchedule.setIcon(icon13)
        self.actionResult = QAction(MainWindow)
        self.actionResult.setObjectName(u"actionResult")
        icon14 = QIcon()
        icon14.addFile(u":/report.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionResult.setIcon(icon14)
        self.actionBacktracing = QAction(MainWindow)
        self.actionBacktracing.setObjectName(u"actionBacktracing")
        self.actionBacktracing.setCheckable(True)
        self.actionBacktracing.setChecked(True)
        self.actionGenerateReports = QAction(MainWindow)
        self.actionGenerateReports.setObjectName(u"actionGenerateReports")
        self.actionGenerateReports.setCheckable(True)
        self.actionGenerateReports.setChecked(True)
        self.actionSynchronize = QAction(MainWindow)
        self.actionSynchronize.setObjectName(u"actionSynchronize")
        self.actionSynchronize.setCheckable(True)
        icon15 = QIcon()
        icon15.addFile(u":/sync.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionSynchronize.setIcon(icon15)
        self.actionHeatMap = QAction(MainWindow)
        self.actionHeatMap.setObjectName(u"actionHeatMap")
        icon16 = QIcon()
        icon16.addFile(u":/cpu.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionHeatMap.setIcon(icon16)
        self.actionLogout = QAction(MainWindow)
        self.actionLogout.setObjectName(u"actionLogout")
        icon17 = QIcon()
        icon17.addFile(u":/logout.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionLogout.setIcon(icon17)
        self.actionCopy = QAction(MainWindow)
        self.actionCopy.setObjectName(u"actionCopy")
        icon18 = QIcon()
        icon18.addFile(u":/copy.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionCopy.setIcon(icon18)
        self.actionmanager = QAction(MainWindow)
        self.actionmanager.setObjectName(u"actionmanager")
        self.actionManager = QAction(MainWindow)
        self.actionManager.setObjectName(u"actionManager")
        icon19 = QIcon()
        icon19.addFile(u":/user-manage.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionManager.setIcon(icon19)
        self.actionBase_Options = QAction(MainWindow)
        self.actionBase_Options.setObjectName(u"actionBase_Options")
        self.actionBase_Options.setCheckable(True)
        self.actionBase_Options.setChecked(True)
        self.actionFullOptions = QAction(MainWindow)
        self.actionFullOptions.setObjectName(u"actionFullOptions")
        self.actionFullOptions.setCheckable(True)
        self.actionFullOptions.setChecked(False)
        icon20 = QIcon()
        icon20.addFile(u":/reset.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionFullOptions.setIcon(icon20)
        self.actionCollapse = QAction(MainWindow)
        self.actionCollapse.setObjectName(u"actionCollapse")
        icon21 = QIcon()
        icon21.addFile(u":/collapse.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionCollapse.setIcon(icon21)
        self.actionContext = QAction(MainWindow)
        self.actionContext.setObjectName(u"actionContext")
        icon22 = QIcon()
        icon22.addFile(u":/context-edit.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionContext.setIcon(icon22)
        self.actionRunDAG = QAction(MainWindow)
        self.actionRunDAG.setObjectName(u"actionRunDAG")
        icon23 = QIcon()
        icon23.addFile(u":/run-dag.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionRunDAG.setIcon(icon23)
        self.actionStop = QAction(MainWindow)
        self.actionStop.setObjectName(u"actionStop")
        icon24 = QIcon()
        icon24.addFile(u":/wifi-off-fill.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionStop.setIcon(icon24)
        self.actionVisageLight = QAction(MainWindow)
        self.actionVisageLight.setObjectName(u"actionVisageLight")
        self.actionsimulator = QAction(MainWindow)
        self.actionsimulator.setObjectName(u"actionsimulator")
        self.actionSaveDAG = QAction(MainWindow)
        self.actionSaveDAG.setObjectName(u"actionSaveDAG")
        icon25 = QIcon()
        icon25.addFile(u":/save_as.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionSaveDAG.setIcon(icon25)
        self.actionreport = QAction(MainWindow)
        self.actionreport.setObjectName(u"actionreport")
        self.actionreport.setIcon(icon14)
        self.actionLight = QAction(MainWindow)
        self.actionLight.setObjectName(u"actionLight")
        self.actionLight.setCheckable(True)
        self.actionBlue_Cerulean = QAction(MainWindow)
        self.actionBlue_Cerulean.setObjectName(u"actionBlue_Cerulean")
        self.actionBlue_Cerulean.setCheckable(True)
        self.actionDark = QAction(MainWindow)
        self.actionDark.setObjectName(u"actionDark")
        self.actionDark.setCheckable(True)
        self.actionDark.setChecked(True)
        self.actionBrown_Sand = QAction(MainWindow)
        self.actionBrown_Sand.setObjectName(u"actionBrown_Sand")
        self.actionBrown_Sand.setCheckable(True)
        self.actionBlue_NVS = QAction(MainWindow)
        self.actionBlue_NVS.setObjectName(u"actionBlue_NVS")
        self.actionBlue_NVS.setCheckable(True)
        self.actionHigh_Contrast = QAction(MainWindow)
        self.actionHigh_Contrast.setObjectName(u"actionHigh_Contrast")
        self.actionHigh_Contrast.setCheckable(True)
        self.actionBlue_Icy = QAction(MainWindow)
        self.actionBlue_Icy.setObjectName(u"actionBlue_Icy")
        self.actionBlue_Icy.setCheckable(True)
        self.actionQt = QAction(MainWindow)
        self.actionQt.setObjectName(u"actionQt")
        self.actionQt.setCheckable(True)
        self.actionImportDAG = QAction(MainWindow)
        self.actionImportDAG.setObjectName(u"actionImportDAG")
        icon26 = QIcon()
        icon26.addFile(u":/local.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionImportDAG.setIcon(icon26)
        self.actionImportEXP = QAction(MainWindow)
        self.actionImportEXP.setObjectName(u"actionImportEXP")
        icon27 = QIcon()
        icon27.addFile(u":/folder-open-fill.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionImportEXP.setIcon(icon27)
        self.actionRunSetting = QAction(MainWindow)
        self.actionRunSetting.setObjectName(u"actionRunSetting")
        self.actionRunSetting.setIcon(icon12)
        self.actionFiles = QAction(MainWindow)
        self.actionFiles.setObjectName(u"actionFiles")
        self.actionFiles.setIcon(icon27)
        self.actionStyleLight = QAction(MainWindow)
        self.actionStyleLight.setObjectName(u"actionStyleLight")
        self.actionExpDoc = QAction(MainWindow)
        self.actionExpDoc.setObjectName(u"actionExpDoc")
        icon28 = QIcon()
        icon28.addFile(u":/file-code.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionExpDoc.setIcon(icon28)
        self.actionUserGide = QAction(MainWindow)
        self.actionUserGide.setObjectName(u"actionUserGide")
        icon29 = QIcon()
        icon29.addFile(u":/txt.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionUserGide.setIcon(icon29)
        self.actionqaio_log = QAction(MainWindow)
        self.actionqaio_log.setObjectName(u"actionqaio_log")
        icon30 = QIcon()
        icon30.addFile(u":/log.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionqaio_log.setIcon(icon30)
        self.actionContet_Side = QAction(MainWindow)
        self.actionContet_Side.setObjectName(u"actionContet_Side")
        self.actionContet_Side.setIcon(icon22)
        self.actionChipManage = QAction(MainWindow)
        self.actionChipManage.setObjectName(u"actionChipManage")
        icon31 = QIcon()
        icon31.addFile(u":/chimera-manage.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionChipManage.setIcon(icon31)
        self.actionWorkSpace = QAction(MainWindow)
        self.actionWorkSpace.setObjectName(u"actionWorkSpace")
        icon32 = QIcon()
        icon32.addFile(u":/workspace-self.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionWorkSpace.setIcon(icon32)
        self.actionWorkSpace_Note = QAction(MainWindow)
        self.actionWorkSpace_Note.setObjectName(u"actionWorkSpace_Note")
        icon33 = QIcon()
        icon33.addFile(u":/workspace-note.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionWorkSpace_Note.setIcon(icon33)
        self.actionWorkSpaceManage = QAction(MainWindow)
        self.actionWorkSpaceManage.setObjectName(u"actionWorkSpaceManage")
        icon34 = QIcon()
        icon34.addFile(u":/workspace-manage.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionWorkSpaceManage.setIcon(icon34)
        self.actionThreadView = QAction(MainWindow)
        self.actionThreadView.setObjectName(u"actionThreadView")
        icon35 = QIcon()
        icon35.addFile(u":/coupler.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionThreadView.setIcon(icon35)
        self.actionRestartExecutor = QAction(MainWindow)
        self.actionRestartExecutor.setObjectName(u"actionRestartExecutor")
        icon36 = QIcon()
        icon36.addFile(u":/loading.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionRestartExecutor.setIcon(icon36)
        self.actionStormManage = QAction(MainWindow)
        self.actionStormManage.setObjectName(u"actionStormManage")
        icon37 = QIcon()
        icon37.addFile(u":/manage2.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionStormManage.setIcon(icon37)
        self.actionDiffThreadView = QAction(MainWindow)
        self.actionDiffThreadView.setObjectName(u"actionDiffThreadView")
        self.actionDiffThreadView.setIcon(icon10)
        self.actionTaskManage = QAction(MainWindow)
        self.actionTaskManage.setObjectName(u"actionTaskManage")
        icon38 = QIcon()
        icon38.addFile(u":/task-manage.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionTaskManage.setIcon(icon38)
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        self.verticalLayout = QVBoxLayout(self.centralwidget)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName(u"verticalLayout")
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.tabWidget = QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName(u"tabWidget")
        self.tabWidget.setIconSize(QSize(24, 24))
        self.tabWidget.setUsesScrollButtons(True)
        self.tabWidget.setDocumentMode(True)
        self.tabWidget.setTabsClosable(False)
        self.tabWidget.setMovable(False)
        self.tabWidget.setTabBarAutoHide(True)
        self.mainDAGTab = DAGWidget(MainWindow.gui)
        self.mainDAGTab.setObjectName(u"mainDAGTab")
        self.verticalLayout_9 = QVBoxLayout(self.mainDAGTab)
        self.verticalLayout_9.setSpacing(0)
        self.verticalLayout_9.setObjectName(u"verticalLayout_9")
        self.verticalLayout_9.setContentsMargins(0, 0, 0, 0)
        icon39 = QIcon()
        icon39.addFile(u":/DAG.png", QSize(), QIcon.Normal, QIcon.Off)
        self.tabWidget.addTab(self.mainDAGTab, icon39, "")
        self.tabPlot = QPlotWidget(gui=MainWindow.gui, parent=self.tabWidget, ui=self)
        self.tabPlot.setObjectName(u"tabPlot")
        self.horizontalLayout_2 = QHBoxLayout(self.tabPlot)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName(u"horizontalLayout_2")
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_8 = QVBoxLayout()
        self.verticalLayout_8.setSpacing(0)
        self.verticalLayout_8.setObjectName(u"verticalLayout_8")
        self.chart_view_y0 = QChartViewY0(self.tabPlot)
        self.chart_view_y0.setObjectName(u"chart_view_y0")

        self.verticalLayout_8.addWidget(self.chart_view_y0)

        self.chart_view_y1 = QChartViewY1(self.tabPlot)
        self.chart_view_y1.setObjectName(u"chart_view_y1")

        self.verticalLayout_8.addWidget(self.chart_view_y1)


        self.horizontalLayout_2.addLayout(self.verticalLayout_8)

        self.verticalLayout_10 = QVBoxLayout()
        self.verticalLayout_10.setObjectName(u"verticalLayout_10")
        self.verticalSpacer_2 = QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Expanding)

        self.verticalLayout_10.addItem(self.verticalSpacer_2)

        self.first_pregress = Progress(self.tabPlot)
        self.first_pregress.setObjectName(u"first_pregress")
        self.horizontalLayout_3 = QHBoxLayout(self.first_pregress)
        self.horizontalLayout_3.setObjectName(u"horizontalLayout_3")

        self.verticalLayout_10.addWidget(self.first_pregress)

        self.verticalSpacer_3 = QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Expanding)

        self.verticalLayout_10.addItem(self.verticalSpacer_3)

        self.verticalLayout_10.setStretch(0, 1)
        self.verticalLayout_10.setStretch(1, 1)
        self.verticalLayout_10.setStretch(2, 1)

        self.horizontalLayout_2.addLayout(self.verticalLayout_10)

        self.horizontalLayout_2.setStretch(0, 9)
        self.horizontalLayout_2.setStretch(1, 2)
        self.tabWidget.addTab(self.tabPlot, icon13, "")
        self.tabTopology = TopologyWidget(MainWindow.gui)
        self.tabTopology.setObjectName(u"tabTopology")
        self.verticalLayout_5 = QVBoxLayout(self.tabTopology)
        self.verticalLayout_5.setSpacing(0)
        self.verticalLayout_5.setObjectName(u"verticalLayout_5")
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.tabWidget.addTab(self.tabTopology, icon16, "")

        self.verticalLayout.addWidget(self.tabWidget)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 1358, 22))
        self.menubar.setBaseSize(QSize(0, 0))
        self.menuDevice = QMenu(self.menubar)
        self.menuDevice.setObjectName(u"menuDevice")
        self.menuDevice.setTearOffEnabled(False)
        self.menuDevice.setSeparatorsCollapsible(True)
        self.menuDevice.setToolTipsVisible(True)
        self.menuQPU = QMenu(self.menuDevice)
        self.menuQPU.setObjectName(u"menuQPU")
        self.menuthread = QMenu(self.menuDevice)
        self.menuthread.setObjectName(u"menuthread")
        icon40 = QIcon()
        icon40.addFile(u":/init_config.png", QSize(), QIcon.Normal, QIcon.Off)
        self.menuthread.setIcon(icon40)
        self.menuView = QMenu(self.menubar)
        self.menuView.setObjectName(u"menuView")
        self.menuStylesheet = QMenu(self.menuView)
        self.menuStylesheet.setObjectName(u"menuStylesheet")
        icon41 = QIcon()
        icon41.addFile(u":/system-theme.png", QSize(), QIcon.Normal, QIcon.Off)
        self.menuStylesheet.setIcon(icon41)
        self.menuReal_Plot_Theme = QMenu(self.menuView)
        self.menuReal_Plot_Theme.setObjectName(u"menuReal_Plot_Theme")
        icon42 = QIcon()
        icon42.addFile(u":/plot-theme.png", QSize(), QIcon.Normal, QIcon.Off)
        self.menuReal_Plot_Theme.setIcon(icon42)
        self.menuHelp = QMenu(self.menubar)
        self.menuHelp.setObjectName(u"menuHelp")
        self.menuHelp.setMinimumSize(QSize(0, 0))
        icon43 = QIcon()
        icon43.addFile(u":/help", QSize(), QIcon.Normal, QIcon.On)
        self.menuHelp.setIcon(icon43)
        self.menuHelp.setToolTipsVisible(True)
        self.menuPlot = QMenu(self.menubar)
        self.menuPlot.setObjectName(u"menuPlot")
        self.menuSettings = QMenu(self.menubar)
        self.menuSettings.setObjectName(u"menuSettings")
        self.menuUser = QMenu(self.menubar)
        self.menuUser.setObjectName(u"menuUser")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(MainWindow)
        self.statusbar.setObjectName(u"statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.dockLibrary = QDockWidget(MainWindow)
        self.dockLibrary.setObjectName(u"dockLibrary")
        sizePolicy = QSizePolicy(QSizePolicy.Preferred, QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.dockLibrary.sizePolicy().hasHeightForWidth())
        self.dockLibrary.setSizePolicy(sizePolicy)
        self.dockLibrary.setMinimumSize(QSize(227, 205))
        icon44 = QIcon()
        icon44.addFile(u":/tag-one.png", QSize(), QIcon.Normal, QIcon.On)
        self.dockLibrary.setWindowIcon(icon44)
        self.dockLibrary.setFloating(False)
        self.dockWidgetContents = QWidget()
        self.dockWidgetContents.setObjectName(u"dockWidgetContents")
        self.verticalLayout_3 = QVBoxLayout(self.dockWidgetContents)
        self.verticalLayout_3.setSpacing(0)
        self.verticalLayout_3.setObjectName(u"verticalLayout_3")
        self.verticalLayout_3.setContentsMargins(4, 0, 0, 0)
        self.gridLayout = QGridLayout()
        self.gridLayout.setSpacing(0)
        self.gridLayout.setObjectName(u"gridLayout")
        self.gridLayout.setSizeConstraint(QLayout.SetNoConstraint)
        self.gridLayout.setContentsMargins(-1, 2, -1, 2)
        self.deleteExpButton = QToolButton(self.dockWidgetContents)
        self.deleteExpButton.setObjectName(u"deleteExpButton")
        icon45 = QIcon()
        icon45.addFile(u":/delete.png", QSize(), QIcon.Normal, QIcon.Off)
        self.deleteExpButton.setIcon(icon45)
        self.deleteExpButton.setIconSize(QSize(24, 24))

        self.gridLayout.addWidget(self.deleteExpButton, 0, 1, 1, 1)

        self.loadExpButton = QToolButton(self.dockWidgetContents)
        self.loadExpButton.setObjectName(u"loadExpButton")
        self.loadExpButton.setIcon(icon27)
        self.loadExpButton.setIconSize(QSize(24, 24))

        self.gridLayout.addWidget(self.loadExpButton, 0, 0, 1, 1)


        self.verticalLayout_3.addLayout(self.gridLayout)

        self.horizontalLayout = QHBoxLayout()
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName(u"horizontalLayout")
        self.filterExpText = FilterLineEdit(MainWindow.gui)
        self.filterExpText.setObjectName(u"filterExpText")
        self.filterExpText.setClearButtonEnabled(True)

        self.horizontalLayout.addWidget(self.filterExpText)


        self.verticalLayout_3.addLayout(self.horizontalLayout)

        self.lib_tab_widget = QTabWidget(self.dockWidgetContents)
        self.lib_tab_widget.setObjectName(u"lib_tab_widget")
        self.lib_tab_widget.setTabPosition(QTabWidget.West)
        self.lib_tab_widget.setTabShape(QTabWidget.Triangular)
        self.tab_exp = QWidget()
        self.tab_exp.setObjectName(u"tab_exp")
        self.verticalLayout_7 = QVBoxLayout(self.tab_exp)
        self.verticalLayout_7.setObjectName(u"verticalLayout_7")
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.experimentLibrary = EXPLibraryTreeView(self.tab_exp, MainWindow.gui)
        self.experimentLibrary.setObjectName(u"experimentLibrary")
        sizePolicy1 = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        sizePolicy1.setHorizontalStretch(0)
        sizePolicy1.setVerticalStretch(0)
        sizePolicy1.setHeightForWidth(self.experimentLibrary.sizePolicy().hasHeightForWidth())
        self.experimentLibrary.setSizePolicy(sizePolicy1)
        self.experimentLibrary.setSizeAdjustPolicy(QAbstractScrollArea.AdjustIgnored)
        self.experimentLibrary.setAutoScroll(True)
        self.experimentLibrary.setDragDropMode(QAbstractItemView.DragDrop)
        self.experimentLibrary.setDefaultDropAction(Qt.ActionMask)
        self.experimentLibrary.setAlternatingRowColors(True)
        self.experimentLibrary.setSelectionBehavior(QAbstractItemView.SelectRows)

        self.verticalLayout_7.addWidget(self.experimentLibrary)

        self.lib_tab_widget.addTab(self.tab_exp, "")
        self.dag_tab = QWidget()
        self.dag_tab.setObjectName(u"dag_tab")
        self.verticalLayout_6 = QVBoxLayout(self.dag_tab)
        self.verticalLayout_6.setObjectName(u"verticalLayout_6")
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.dagLibrary = DAGLibraryTreeView(self.dag_tab, MainWindow.gui)
        self.dagLibrary.setObjectName(u"dagLibrary")

        self.verticalLayout_6.addWidget(self.dagLibrary)

        self.lib_tab_widget.addTab(self.dag_tab, "")

        self.verticalLayout_3.addWidget(self.lib_tab_widget)

        self.dockLibrary.setWidget(self.dockWidgetContents)
        MainWindow.addDockWidget(Qt.LeftDockWidgetArea, self.dockLibrary)
        self.dockEditOptions = QDockWidget(MainWindow)
        self.dockEditOptions.setObjectName(u"dockEditOptions")
        self.dockEditOptions.setMinimumSize(QSize(382, 125))
        self.dockEditOptions.setContextMenuPolicy(Qt.DefaultContextMenu)
        icon46 = QIcon()
        icon46.addFile(u":/geometric-flowers.png", QSize(), QIcon.Normal, QIcon.Off)
        self.dockEditOptions.setWindowIcon(icon46)
        self.dockOptionsContents = QWidget()
        self.dockOptionsContents.setObjectName(u"dockOptionsContents")
        self.verticalLayout_2 = QVBoxLayout(self.dockOptionsContents)
        self.verticalLayout_2.setObjectName(u"verticalLayout_2")
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.dockEditOptions.setWidget(self.dockOptionsContents)
        MainWindow.addDockWidget(Qt.RightDockWidgetArea, self.dockEditOptions)
        self.toolBarDesign = QToolBar(MainWindow)
        self.toolBarDesign.setObjectName(u"toolBarDesign")
        self.toolBarDesign.setOrientation(Qt.Horizontal)
        self.toolBarDesign.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
        MainWindow.addToolBar(Qt.TopToolBarArea, self.toolBarDesign)
        self.dockContext = QDockWidget(MainWindow)
        self.dockContext.setObjectName(u"dockContext")
        self.dockContext.setMinimumSize(QSize(382, 125))
        icon47 = QIcon()
        icon47.addFile(u":/build.png", QSize(), QIcon.Normal, QIcon.Off)
        self.dockContext.setWindowIcon(icon47)
        self.dockContextContents = QWidget()
        self.dockContextContents.setObjectName(u"dockContextContents")
        self.verticalLayout_4 = QVBoxLayout(self.dockContextContents)
        self.verticalLayout_4.setObjectName(u"verticalLayout_4")
        self.dockContext.setWidget(self.dockContextContents)
        MainWindow.addDockWidget(Qt.RightDockWidgetArea, self.dockContext)
        self.dockLog = QDockWidget(MainWindow)
        self.dockLog.setObjectName(u"dockLog")
        self.dockLog.setMaximumSize(QSize(524287, 524287))
        icon48 = QIcon()
        icon48.addFile(u":/log", QSize(), QIcon.Normal, QIcon.On)
        self.dockLog.setWindowIcon(icon48)
        self.dockWidgetContents_4 = QWidget()
        self.dockWidgetContents_4.setObjectName(u"dockWidgetContents_4")
        sizePolicy.setHeightForWidth(self.dockWidgetContents_4.sizePolicy().hasHeightForWidth())
        self.dockWidgetContents_4.setSizePolicy(sizePolicy)
        self.horizontalLayout_4 = QHBoxLayout(self.dockWidgetContents_4)
        self.horizontalLayout_4.setObjectName(u"horizontalLayout_4")
        self.splitter = QSplitter(self.dockWidgetContents_4)
        self.splitter.setObjectName(u"splitter")
        sizePolicy.setHeightForWidth(self.splitter.sizePolicy().hasHeightForWidth())
        self.splitter.setSizePolicy(sizePolicy)
        self.splitter.setOrientation(Qt.Horizontal)
        self.log_text = QTextEditLogger(self.splitter)
        self.log_text.setObjectName(u"log_text")
        sizePolicy.setHeightForWidth(self.log_text.sizePolicy().hasHeightForWidth())
        self.log_text.setSizePolicy(sizePolicy)
        self.log_text.setTextInteractionFlags(Qt.LinksAccessibleByKeyboard|Qt.LinksAccessibleByMouse|Qt.TextBrowserInteraction|Qt.TextSelectableByKeyboard|Qt.TextSelectableByMouse)

        # Keep the code below.
        abs_path = Path(__file__).absolute().parent
        font_id = QFontDatabase.addApplicationFont(abs_path.joinpath("_fonts/JetBrainsMono-Regular.ttf").__str__())
        font_family = QFontDatabase.applicationFontFamilies(font_id)[0]
        self.log_text.setFont(QFont(font_family))

        self.splitter.addWidget(self.log_text)
        self.log_qstream = QTextEditLogger(self.splitter)
        self.log_qstream.setObjectName(u"log_qstream")
        sizePolicy.setHeightForWidth(self.log_qstream.sizePolicy().hasHeightForWidth())
        self.log_qstream.setSizePolicy(sizePolicy)
        self.log_qstream.setReadOnly(True)
        self.log_qstream.setTextInteractionFlags(Qt.TextSelectableByKeyboard|Qt.TextSelectableByMouse)
        self.splitter.addWidget(self.log_qstream)

        self.horizontalLayout_4.addWidget(self.splitter)

        self.dockLog.setWidget(self.dockWidgetContents_4)
        MainWindow.addDockWidget(Qt.BottomDockWidgetArea, self.dockLog)

        self.menubar.addAction(self.menuDevice.menuAction())
        self.menubar.addAction(self.menuSettings.menuAction())
        self.menubar.addAction(self.menuPlot.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuUser.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.menuDevice.addSeparator()
        self.menuDevice.addAction(self.actionSystem)
        self.menuDevice.addAction(self.menuQPU.menuAction())
        self.menuDevice.addAction(self.actionContext)
        self.menuDevice.addAction(self.actionComponent)
        self.menuDevice.addAction(self.actionFiles)
        self.menuDevice.addAction(self.menuthread.menuAction())
        self.menuDevice.addSeparator()
        self.menuDevice.addSeparator()
        self.menuDevice.addAction(self.actionCloseWindow)
        self.menuDevice.addAction(self.actionRestartExecutor)
        self.menuQPU.addAction(self.actionHeatMap)
        self.menuQPU.addAction(self.actionWorkSpaceManage)
        self.menuQPU.addAction(self.actionStormManage)
        self.menuQPU.addAction(self.actionTaskManage)
        self.menuthread.addAction(self.actionChipManage)
        self.menuthread.addAction(self.actionThreadView)
        self.menuthread.addAction(self.actionDiffThreadView)
        self.menuView.addAction(self.actionLibrary)
        self.menuView.addAction(self.actionLog)
        self.menuView.addAction(self.actionqaio_log)
        self.menuView.addAction(self.actionExperimentOptions)
        self.menuView.addAction(self.actionAnalysisOptions)
        self.menuView.addAction(self.actionContet_Side)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionFullScreen)
        self.menuView.addAction(self.actionScreenshot)
        self.menuView.addAction(self.actionCollapse)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionSaveWindowState)
        self.menuView.addAction(self.menuStylesheet.menuAction())
        self.menuView.addAction(self.menuReal_Plot_Theme.menuAction())
        self.menuView.addSeparator()
        self.menuStylesheet.addAction(self.actionStyleDark)
        self.menuStylesheet.addAction(self.actionStyleLight)
        self.menuStylesheet.addSeparator()
        self.menuStylesheet.addAction(self.actionVisageDark)
        self.menuStylesheet.addAction(self.actionVisageLight)
        self.menuStylesheet.addSeparator()
        self.menuStylesheet.addAction(self.actionStyleDefault)
        self.menuStylesheet.addAction(self.actionStyleOpen)
        self.menuReal_Plot_Theme.addAction(self.actionLight)
        self.menuReal_Plot_Theme.addAction(self.actionBlue_Cerulean)
        self.menuReal_Plot_Theme.addAction(self.actionDark)
        self.menuReal_Plot_Theme.addAction(self.actionBrown_Sand)
        self.menuReal_Plot_Theme.addAction(self.actionBlue_NVS)
        self.menuReal_Plot_Theme.addAction(self.actionHigh_Contrast)
        self.menuReal_Plot_Theme.addAction(self.actionBlue_Icy)
        self.menuReal_Plot_Theme.addAction(self.actionQt)
        self.menuHelp.addAction(self.actionExpDoc)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionUserGide)
        self.menuHelp.addAction(self.actionCommunity)
        self.menuPlot.addAction(self.actionSchedule)
        self.menuPlot.addAction(self.actionResult)
        self.menuSettings.addAction(self.actionRunSetting)
        self.menuSettings.addAction(self.actionreport)
        self.menuSettings.addAction(self.actionImportDAG)
        self.menuSettings.addAction(self.actionImportEXP)
        self.menuSettings.addAction(self.actionSynchronize)
        self.menuSettings.addAction(self.actionFullOptions)
        self.menuUser.addAction(self.actionLogout)
        self.menuUser.addAction(self.actionCopy)
        self.menuUser.addAction(self.actionManager)
        self.menuUser.addAction(self.actionWorkSpace)
        self.menuUser.addAction(self.actionWorkSpace_Note)
        self.toolBarDesign.addAction(self.actionRunExperiment)
        self.toolBarDesign.addAction(self.actionRunDAG)
        self.toolBarDesign.addAction(self.actionStop)
        self.toolBarDesign.addAction(self.actionSaveEXP)
        self.toolBarDesign.addAction(self.actionSaveDAG)
        self.toolBarDesign.addAction(self.actionFullScreen)
        self.toolBarDesign.addAction(self.actionScreenshot)
        self.toolBarDesign.addAction(self.actionCollapse)

        self.retranslateUi(MainWindow)
        self.actionSaveEXP.triggered.connect(MainWindow.save_exp)
        self.actionStyleDark.triggered.connect(MainWindow.load_stylesheet_dark)
        self.actionStyleDefault.triggered.connect(MainWindow.load_stylesheet_default)
        self.actionScreenshot.triggered.connect(MainWindow._screenshot)
        self.actionStyleOpen.triggered.connect(MainWindow.load_stylesheet_open)
        self.actionFullScreen.triggered.connect(MainWindow.showFullScreen_)
        self.actionVisageDark.triggered.connect(MainWindow.load_stylesheet_cat_dark)
        self.dockLibrary.visibilityChanged.connect(self.actionLibrary.setChecked)
        self.actionLibrary.triggered["bool"].connect(self.dockLibrary.show)
        self.actionLibrary.triggered.connect(self.dockLibrary.raise_)
        self.actionCloseWindow.triggered.connect(MainWindow.close_)
        self.actionSaveWindowState.triggered.connect(MainWindow.save_window_settings)
        self.actionExperimentOptions.triggered.connect(self.dockEditOptions.raise_)
        self.actionExperimentOptions.triggered["bool"].connect(self.dockEditOptions.show)
        self.dockEditOptions.visibilityChanged.connect(self.actionExperimentOptions.setChecked)
        self.actionHeatMap.triggered.connect(MainWindow.load_heatmap)
        self.loadExpButton.clicked.connect(MainWindow.open_experiment_file)
        self.deleteExpButton.clicked.connect(MainWindow.delete_custom_exp)
        self.actionSystem.triggered.connect(MainWindow.open_system_ui)
        self.actionComponent.triggered.connect(MainWindow.open_component_edit_ui)
        self.actionRunExperiment.triggered.connect(MainWindow.run_experiment)
        self.actionFullOptions.triggered.connect(MainWindow.is_full_options)
        self.actionCollapse.triggered.connect(MainWindow.collapse_all_docks)
        self.actionManager.triggered.connect(MainWindow.open_user_ui)
        self.actionContext.triggered.connect(MainWindow.open_context_ui)
        self.actionLogout.triggered.connect(MainWindow.login_out)
        self.actionRunDAG.triggered.connect(MainWindow.run_dag)
        self.actionStop.triggered.connect(MainWindow.stop_execute)
        # self.menubar.triggered.connect(MainWindow.load_stylesheet_light)
        self.actionVisageLight.triggered.connect(MainWindow.load_stylesheet_cat_light)
        # self.actionsimulator.triggered.connect(MainWindow.open_simulator_ui)
        self.actionreport.triggered.connect(MainWindow.open_report_ui)
        self.actionSaveDAG.triggered.connect(MainWindow.save_dag)
        self.actionLight.triggered.connect(MainWindow.chart_light_theme)
        self.actionBlue_Cerulean.triggered.connect(MainWindow.chart_bc_theme)
        self.actionDark.triggered.connect(MainWindow.chart_dark_theme)
        self.actionBrown_Sand.triggered.connect(MainWindow.chart_bs_theme)
        self.actionBlue_NVS.triggered.connect(MainWindow.chart_bn_theme)
        self.actionHigh_Contrast.triggered.connect(MainWindow.chart_hc_theme)
        self.actionQt.triggered.connect(MainWindow.chart_qt_theme)
        self.actionBlue_Icy.triggered.connect(MainWindow.chart_bi_theme)
        self.actionImportDAG.triggered.connect(MainWindow.import_dag)
        self.actionImportEXP.triggered.connect(MainWindow.import_exp)
        self.actionRunSetting.triggered.connect(MainWindow.open_run_setting)
        self.actionSchedule.triggered.connect(MainWindow.open_schedule_tool)
        self.actionManager.triggered.connect(MainWindow.user_manager)
        self.actionFiles.triggered.connect(MainWindow.open_files_widget)
        self.actionCopy.triggered.connect(MainWindow.load_copy)
        self.actionStyleLight.triggered.connect(MainWindow.load_stylesheet_light)
        self.actionCommunity.triggered.connect(MainWindow.open_community)
        self.actionExpDoc.triggered.connect(MainWindow.open_exp_doc)
        self.actionUserGide.triggered.connect(MainWindow.open_user_manual)
        self.actionqaio_log.triggered.connect(MainWindow.show_qaio_log)
        self.actionContet_Side.triggered["bool"].connect(self.dockContext.show)
        self.actionContet_Side.triggered.connect(self.dockContext.raise_)
        self.actionChipManage.triggered.connect(MainWindow.load_chip_manage)
        self.actionWorkSpace.triggered.connect(MainWindow.load_workspace)
        self.actionWorkSpace_Note.triggered.connect(MainWindow.load_workspace_note)
        self.actionLog.triggered.connect(self.dockLog.raise_)
        self.dockLog.visibilityChanged.connect(self.actionLog.setChecked)
        self.actionTaskManage.triggered.connect(MainWindow.load_dag_manage)
        self.actionLog.triggered["bool"].connect(self.dockLog.show)
        self.actionWorkSpaceManage.triggered.connect(MainWindow.load_workspace_manage)
        self.actionThreadView.triggered.connect(MainWindow.load_thread_view)
        self.actionRestartExecutor.triggered.connect(MainWindow.restart_executor_process)
        self.actionStormManage.triggered.connect(MainWindow.load_storm_manage)
        self.actionDiffThreadView.triggered.connect(MainWindow.show_diff_thread_view)
        self.actionTaskManage.triggered.connect(MainWindow.load_dag_manage)

        self.tabWidget.setCurrentIndex(2)
        self.lib_tab_widget.setCurrentIndex(0)


        QMetaObject.connectSlotsByName(MainWindow)
    # setupUi

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"pyQCat: Quantum Chip Calibration", None))
#if QT_CONFIG(tooltip)
        MainWindow.setToolTip("")
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        MainWindow.setStatusTip(QCoreApplication.translate("MainWindow", u"pyQCat: Quantum Chip Calibration", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        MainWindow.setWhatsThis(QCoreApplication.translate("MainWindow", u"pyQCat: Quantum Chip Calibration", None))
#endif // QT_CONFIG(whatsthis)
        self.actionSaveEXP.setText(QCoreApplication.translate("MainWindow", u"Save EXP", None))
#if QT_CONFIG(tooltip)
        self.actionSaveEXP.setToolTip(QCoreApplication.translate("MainWindow", u"Save Exp to DB", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionSaveEXP.setStatusTip(QCoreApplication.translate("MainWindow", u"Save design to file", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionSaveEXP.setWhatsThis(QCoreApplication.translate("MainWindow", u"Save design to file", None))
#endif // QT_CONFIG(whatsthis)
#if QT_CONFIG(shortcut)
        self.actionSaveEXP.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+S", None))
#endif // QT_CONFIG(shortcut)
        self.actionLibrary.setText(QCoreApplication.translate("MainWindow", u"Library", None))
#if QT_CONFIG(tooltip)
        self.actionLibrary.setToolTip(QCoreApplication.translate("MainWindow", u"Show experiment library -- select  experiment", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionLibrary.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+D", None))
#endif // QT_CONFIG(shortcut)
        self.actionLog.setText(QCoreApplication.translate("MainWindow", u"Log", None))
#if QT_CONFIG(tooltip)
        self.actionLog.setToolTip(QCoreApplication.translate("MainWindow", u"Show/hide log window", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionLog.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+L", None))
#endif // QT_CONFIG(shortcut)
        self.actionExperimentOptions.setText(QCoreApplication.translate("MainWindow", u"Experiment Options", None))
#if QT_CONFIG(tooltip)
        self.actionExperimentOptions.setToolTip(QCoreApplication.translate("MainWindow", u"Open window to edit experiment options", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionExperimentOptions.setStatusTip(QCoreApplication.translate("MainWindow", u"Open window to edit experiment options", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionExperimentOptions.setWhatsThis(QCoreApplication.translate("MainWindow", u"Open window to edit experiment options", None))
#endif // QT_CONFIG(whatsthis)
#if QT_CONFIG(shortcut)
        self.actionExperimentOptions.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+E", None))
#endif // QT_CONFIG(shortcut)
        self.actionStyleOpen.setText(QCoreApplication.translate("MainWindow", u"Open File", None))
        self.actionStyleDefault.setText(QCoreApplication.translate("MainWindow", u"System default", None))
        self.actionStyleDark.setText(QCoreApplication.translate("MainWindow", u"Classic Dark", None))
        self.actionScreenshot.setText(QCoreApplication.translate("MainWindow", u"SnapShot", None))
#if QT_CONFIG(tooltip)
        self.actionScreenshot.setToolTip(QCoreApplication.translate("MainWindow", u"Take a screenshot of the window", None))
#endif // QT_CONFIG(tooltip)
        self.actionFullScreen.setText(QCoreApplication.translate("MainWindow", u"Full Screen", None))
#if QT_CONFIG(tooltip)
        self.actionFullScreen.setToolTip(QCoreApplication.translate("MainWindow", u"Go to full screen", None))
#endif // QT_CONFIG(tooltip)
        self.actionVisageDark.setText(QCoreApplication.translate("MainWindow", u"Visage Dark", None))
        self.actionVisageDark.setIconText(QCoreApplication.translate("MainWindow", u"Visage Dark", None))
#if QT_CONFIG(tooltip)
        self.actionVisageDark.setToolTip(QCoreApplication.translate("MainWindow", u"Visage Dark", None))
#endif // QT_CONFIG(tooltip)
        self.actionSaveWindowState.setText(QCoreApplication.translate("MainWindow", u"Save window state", None))
        self.actionCloseWindow.setText(QCoreApplication.translate("MainWindow", u"Close window", None))
        self.actionComponent.setText(QCoreApplication.translate("MainWindow", u"Component", None))
#if QT_CONFIG(tooltip)
        self.actionComponent.setToolTip(QCoreApplication.translate("MainWindow", u"Get quantum component info", None))
#endif // QT_CONFIG(tooltip)
        self.actionAnalysisOptions.setText(QCoreApplication.translate("MainWindow", u"Analysis Options", None))
#if QT_CONFIG(tooltip)
        self.actionAnalysisOptions.setToolTip(QCoreApplication.translate("MainWindow", u"Open window to edit experiment analysis options", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionAnalysisOptions.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+A", None))
#endif // QT_CONFIG(shortcut)
        self.actionSystem.setText(QCoreApplication.translate("MainWindow", u"System", None))
#if QT_CONFIG(tooltip)
        self.actionSystem.setToolTip(QCoreApplication.translate("MainWindow", u"Get/Edit system info", None))
#endif // QT_CONFIG(tooltip)
        self.actionCommunity.setText(QCoreApplication.translate("MainWindow", u"PyQCat Community", None))
#if QT_CONFIG(statustip)
        self.actionCommunity.setStatusTip(QCoreApplication.translate("MainWindow", u"PyQCat Community: contains all the PyQCat material descriptions.", None))
#endif // QT_CONFIG(statustip)
        self.actionRunExperiment.setText(QCoreApplication.translate("MainWindow", u"Run EXP", None))
#if QT_CONFIG(tooltip)
        self.actionRunExperiment.setToolTip(QCoreApplication.translate("MainWindow", u"Execute experiment", None))
#endif // QT_CONFIG(tooltip)
        self.actionSchedule.setText(QCoreApplication.translate("MainWindow", u"Schedule", None))
        self.actionResult.setText(QCoreApplication.translate("MainWindow", u"Result", None))
        self.actionBacktracing.setText(QCoreApplication.translate("MainWindow", u"backtracing", None))
#if QT_CONFIG(tooltip)
        self.actionBacktracing.setToolTip(QCoreApplication.translate("MainWindow", u"enable or disable DAG backtracing fucntion", None))
#endif // QT_CONFIG(tooltip)
        self.actionGenerateReports.setText(QCoreApplication.translate("MainWindow", u"generate reports", None))
#if QT_CONFIG(tooltip)
        self.actionGenerateReports.setToolTip(QCoreApplication.translate("MainWindow", u"Enable or disable test reports after running DAG ", None))
#endif // QT_CONFIG(tooltip)
        self.actionSynchronize.setText(QCoreApplication.translate("MainWindow", u"Synchronize", None))
#if QT_CONFIG(tooltip)
        self.actionSynchronize.setToolTip(QCoreApplication.translate("MainWindow", u"Synchronize DAG experiment and library experiment", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionSynchronize.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Alt+S", None))
#endif // QT_CONFIG(shortcut)
        self.actionHeatMap.setText(QCoreApplication.translate("MainWindow", u"HeatMap", None))
        self.actionLogout.setText(QCoreApplication.translate("MainWindow", u"Logout", None))
        self.actionCopy.setText(QCoreApplication.translate("MainWindow", u"Copy", None))
        self.actionmanager.setText(QCoreApplication.translate("MainWindow", u"Manager", None))
        self.actionManager.setText(QCoreApplication.translate("MainWindow", u"Manager", None))
        self.actionBase_Options.setText(QCoreApplication.translate("MainWindow", u"base options", None))
        self.actionFullOptions.setText(QCoreApplication.translate("MainWindow", u"Full Options", None))
#if QT_CONFIG(shortcut)
        self.actionFullOptions.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Alt+F", None))
#endif // QT_CONFIG(shortcut)
        self.actionCollapse.setText(QCoreApplication.translate("MainWindow", u"Collapse All", None))
#if QT_CONFIG(tooltip)
        self.actionCollapse.setToolTip(QCoreApplication.translate("MainWindow", u"Collapse all docks", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionCollapse.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+C", None))
#endif // QT_CONFIG(shortcut)
        self.actionContext.setText(QCoreApplication.translate("MainWindow", u"Context", None))
        self.actionRunDAG.setText(QCoreApplication.translate("MainWindow", u"Run DAG", None))
        self.actionStop.setText(QCoreApplication.translate("MainWindow", u"Stop", None))
        self.actionVisageLight.setText(QCoreApplication.translate("MainWindow", u"Visage Light", None))
        self.actionsimulator.setText(QCoreApplication.translate("MainWindow", u"Simulator", None))
        self.actionSaveDAG.setText(QCoreApplication.translate("MainWindow", u"Save DAG", None))
#if QT_CONFIG(tooltip)
        self.actionSaveDAG.setToolTip(QCoreApplication.translate("MainWindow", u"Save DAG", None))
#endif // QT_CONFIG(tooltip)
        self.actionreport.setText(QCoreApplication.translate("MainWindow", u"Report", None))
        self.actionLight.setText(QCoreApplication.translate("MainWindow", u"Light", None))
        self.actionBlue_Cerulean.setText(QCoreApplication.translate("MainWindow", u"Blue Cerulean", None))
        self.actionDark.setText(QCoreApplication.translate("MainWindow", u"Dark", None))
        self.actionBrown_Sand.setText(QCoreApplication.translate("MainWindow", u"Brown Sand", None))
        self.actionBlue_NVS.setText(QCoreApplication.translate("MainWindow", u"Blue NVS", None))
        self.actionHigh_Contrast.setText(QCoreApplication.translate("MainWindow", u"High Contrast", None))
        self.actionBlue_Icy.setText(QCoreApplication.translate("MainWindow", u"Blue Icy", None))
        self.actionQt.setText(QCoreApplication.translate("MainWindow", u"Qt", None))
        self.actionImportDAG.setText(QCoreApplication.translate("MainWindow", u"Import DAG", None))
        self.actionImportEXP.setText(QCoreApplication.translate("MainWindow", u"Import EXP", None))
        self.actionRunSetting.setText(QCoreApplication.translate("MainWindow", u"Run", None))
        self.actionFiles.setText(QCoreApplication.translate("MainWindow", u"Files", None))
        self.actionStyleLight.setText(QCoreApplication.translate("MainWindow", u"Classic Light", None))
        self.actionExpDoc.setText(QCoreApplication.translate("MainWindow", u"Experiment Document", None))
        self.actionUserGide.setText(QCoreApplication.translate("MainWindow", u"User Manual", None))
        self.actionqaio_log.setText(QCoreApplication.translate("MainWindow", u"qaio log", None))
        self.actionContet_Side.setText(QCoreApplication.translate("MainWindow", u"Contet Side", None))
        self.actionChipManage.setText(QCoreApplication.translate("MainWindow", u"ChimeraManage", None))
        self.actionWorkSpace.setText(QCoreApplication.translate("MainWindow", u"WorkSpace", None))
        self.actionWorkSpace_Note.setText(QCoreApplication.translate("MainWindow", u"WorkSpace Note", None))
        self.actionWorkSpaceManage.setText(QCoreApplication.translate("MainWindow", u"WorkSpaceManage", None))
        self.actionThreadView.setText(QCoreApplication.translate("MainWindow", u"ThreadView", None))
        self.actionRestartExecutor.setText(QCoreApplication.translate("MainWindow", u"restart executor", None))
        self.actionStormManage.setText(QCoreApplication.translate("MainWindow", u"StormManage", None))
        self.actionDiffThreadView.setText(QCoreApplication.translate("MainWindow", u"DiffThreadView", None))
        self.actionTaskManage.setText(QCoreApplication.translate("MainWindow", u"TaskManage", None))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.mainDAGTab), QCoreApplication.translate("MainWindow", u"DAG Live", None))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabPlot), QCoreApplication.translate("MainWindow", u"Real-time Plot", None))
#if QT_CONFIG(tooltip)
        self.tabWidget.setTabToolTip(self.tabWidget.indexOf(self.tabPlot), QCoreApplication.translate("MainWindow", u"Show the experiment result real time", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(whatsthis)
        self.tabWidget.setTabWhatsThis(self.tabWidget.indexOf(self.tabPlot), QCoreApplication.translate("MainWindow", u"Show the experiment result real time", None))
#endif // QT_CONFIG(whatsthis)
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabTopology), QCoreApplication.translate("MainWindow", u"Chip Topology", None))
#if QT_CONFIG(tooltip)
        self.menuDevice.setToolTip(QCoreApplication.translate("MainWindow", u"Design Menu", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.menuDevice.setStatusTip(QCoreApplication.translate("MainWindow", u"Design Menu", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.menuDevice.setWhatsThis(QCoreApplication.translate("MainWindow", u"Design Menu", None))
#endif // QT_CONFIG(whatsthis)
        self.menuDevice.setTitle(QCoreApplication.translate("MainWindow", u"Quantum Device", None))
        self.menuQPU.setTitle(QCoreApplication.translate("MainWindow", u"QPU", None))
        self.menuthread.setTitle(QCoreApplication.translate("MainWindow", u"thread", None))
        self.menuView.setTitle(QCoreApplication.translate("MainWindow", u"Window", None))
        self.menuStylesheet.setTitle(QCoreApplication.translate("MainWindow", u"Color theme", None))
        self.menuReal_Plot_Theme.setTitle(QCoreApplication.translate("MainWindow", u"Real Plot Theme", None))
#if QT_CONFIG(tooltip)
        self.menuHelp.setToolTip(QCoreApplication.translate("MainWindow", u"Open Metal Help", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.menuHelp.setStatusTip(QCoreApplication.translate("MainWindow", u"Open Metal Help", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.menuHelp.setWhatsThis(QCoreApplication.translate("MainWindow", u"Open Metal Help", None))
#endif // QT_CONFIG(whatsthis)
        self.menuHelp.setTitle(QCoreApplication.translate("MainWindow", u"Help", None))
        self.menuPlot.setTitle(QCoreApplication.translate("MainWindow", u"View", None))
        self.menuSettings.setTitle(QCoreApplication.translate("MainWindow", u"Settings", None))
        self.menuUser.setTitle(QCoreApplication.translate("MainWindow", u"User", None))
#if QT_CONFIG(tooltip)
        self.dockLibrary.setToolTip(QCoreApplication.translate("MainWindow", u"Library of all the experiments", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.dockLibrary.setStatusTip(QCoreApplication.translate("MainWindow", u"Library of all the experiments", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.dockLibrary.setWhatsThis(QCoreApplication.translate("MainWindow", u"Library of all the experiments", None))
#endif // QT_CONFIG(whatsthis)
#if QT_CONFIG(accessibility)
        self.dockLibrary.setAccessibleName("")
#endif // QT_CONFIG(accessibility)
#if QT_CONFIG(accessibility)
        self.dockLibrary.setAccessibleDescription(QCoreApplication.translate("MainWindow", u"Library Dock", None))
#endif // QT_CONFIG(accessibility)
        self.dockLibrary.setWindowTitle(QCoreApplication.translate("MainWindow", u"Library", None))
#if QT_CONFIG(tooltip)
        self.deleteExpButton.setToolTip(QCoreApplication.translate("MainWindow", u"Focus on component in drawing window", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.deleteExpButton.setStatusTip(QCoreApplication.translate("MainWindow", u"Focus on component in drawing window", None))
#endif // QT_CONFIG(statustip)
        self.deleteExpButton.setText(QCoreApplication.translate("MainWindow", u"Focus on component in drawing window", None))
        self.loadExpButton.setText("")
        self.filterExpText.setText("")
        self.filterExpText.setPlaceholderText(QCoreApplication.translate("MainWindow", u"Filter", None))
        self.lib_tab_widget.setTabText(self.lib_tab_widget.indexOf(self.tab_exp), QCoreApplication.translate("MainWindow", u"Experiments", None))
        self.lib_tab_widget.setTabText(self.lib_tab_widget.indexOf(self.dag_tab), QCoreApplication.translate("MainWindow", u"Dags", None))
#if QT_CONFIG(tooltip)
        self.dockEditOptions.setToolTip(QCoreApplication.translate("MainWindow", u"Options of experiment configs", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.dockEditOptions.setStatusTip(QCoreApplication.translate("MainWindow", u"Options of experiment configs", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.dockEditOptions.setWhatsThis(QCoreApplication.translate("MainWindow", u"Options of experiment configs", None))
#endif // QT_CONFIG(whatsthis)
        self.dockEditOptions.setWindowTitle(QCoreApplication.translate("MainWindow", u"Options Editor", None))
        self.toolBarDesign.setWindowTitle(QCoreApplication.translate("MainWindow", u"Design toolbar", None))
#if QT_CONFIG(statustip)
        self.toolBarDesign.setStatusTip(QCoreApplication.translate("MainWindow", u"Design toolbar", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.toolBarDesign.setWhatsThis(QCoreApplication.translate("MainWindow", u"Design toolbar", None))
#endif // QT_CONFIG(whatsthis)
#if QT_CONFIG(tooltip)
        self.dockContext.setToolTip(QCoreApplication.translate("MainWindow", u"Context settings", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.dockContext.setStatusTip(QCoreApplication.translate("MainWindow", u"Context settings", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.dockContext.setWhatsThis(QCoreApplication.translate("MainWindow", u"Context settings", None))
#endif // QT_CONFIG(whatsthis)
#if QT_CONFIG(tooltip)
        self.dockLog.setToolTip(QCoreApplication.translate("MainWindow", u"Log window", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.dockLog.setStatusTip(QCoreApplication.translate("MainWindow", u"Log window", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.dockLog.setWhatsThis(QCoreApplication.translate("MainWindow", u"Log window", None))
#endif // QT_CONFIG(whatsthis)
        self.dockLog.setWindowTitle(QCoreApplication.translate("MainWindow", u"Log", None))
        self.log_text.setDocumentTitle(QCoreApplication.translate("MainWindow", u"Log", None))
        self.log_qstream.setDocumentTitle(QCoreApplication.translate("MainWindow", u"qaio_log", None))
    # retranslateUi

