#if __name__ == "__main__":
    '''    
    init(QMachineType.CPU)
    qubits = qAlloc_many(4)
    cbits = cAlloc_many(4)
    prog = QProg()
    circuit = CreateEmptyCircuit()

    circuit.insert(H(qubits[0])) \
        .insert(CNOT(qubits[0], qubits[1])) \
        .insert(CNOT(qubits[1], qubits[2])) \
        .insert(CNOT(qubits[2], qubits[3]))

    prog.insert(circuit).insert(Measure(qubits[0], cbits[0]))
    result = run_with_configuration(prog, cbits, 2000)
    print(result)

    finalize()
    '''

    '''
    init(QMachineType.CPU)
    qubits = qAlloc_many(3)
    control_qubits = [qubits[0], qubits[1]]
    prog = CreateEmptyQProg()

    prog.insert(H(qubits[0])) \
         .insert(H(qubits[1])) \
         .insert(H(qubits[0]).dagger()) \
         .insert(X(qubits[2]).control(control_qubits))

    result = prob_run_dict(prog, qubits, -1)
    for key in result:
         print(key+":"+str(result[key]))

    finalize()
    '''
    '''
    init(QMachineType.CPU)
    qubits = qAlloc_many(3)
    cbits = cAlloc_many(3)
    cbits[0].setValue(0)
    cbits[1].setValue(1)

    prog = QProg()
    prog_while = QProg()
    prog_while.insert(H(qubits[0])).insert(H(qubits[1])).insert(H(qubits[2]))\
            .insert(assign(cbits[0], cbits[0] + 1)).insert(Measure(qubits[1], cbits[1]))
    qwhile = CreateWhileProg(cbits[1], prog_while)
    prog.insert(qwhile)

    result = directly_run(prog)
    print(cbits[0].eval())
    print(result)
    finalize()
    '''

